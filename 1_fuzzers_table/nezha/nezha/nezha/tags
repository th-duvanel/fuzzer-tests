!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AFL_DEFER_FORKSVR	afl/afl_driver.cpp	/^static volatile char AFL_DEFER_FORKSVR[] = "##SIG_AFL_DEFER_FORKSRV##";$/;"	v	file:
AFL_PERSISTENT	afl/afl_driver.cpp	/^static volatile char AFL_PERSISTENT[] = "##SIG_AFL_PERSISTENT##";$/;"	v	file:
AddMutation	FuzzerTraceState.cpp	/^  void AddMutation(uint32_t Pos, uint32_t Size, const uint8_t *Data) {$/;"	f	class:fuzzer::TraceState
AddMutation	FuzzerTraceState.cpp	/^  void AddMutation(uint32_t Pos, uint32_t Size, uint64_t Data) {$/;"	f	class:fuzzer::TraceState
AddPCTrace	FuzzerCallTrie.cpp	/^FuzzerCallTrie *FuzzerCallTrie::AddPCTrace(FuzzerCallTrie *t,$/;"	f	class:fuzzer::FuzzerCallTrie
AddToCorpus	FuzzerInternal.h	/^  void AddToCorpus(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
AddWordFromDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::AddWordFromDictionary(Dictionary &D, uint8_t *Data,$/;"	f	class:fuzzer::MutationDispatcher
AddWordToAutoDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::AddWordToAutoDictionary(const Word &W,$/;"	f	class:fuzzer::MutationDispatcher
AddWordToManualDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::AddWordToManualDictionary(const Word &W) {$/;"	f	class:fuzzer::MutationDispatcher
AflInputBuf	afl/afl_driver.cpp	/^static uint8_t AflInputBuf[kMaxAflInputSize];$/;"	v	file:
AlarmCallback	FuzzerLoop.cpp	/^void Fuzzer::AlarmCallback() {$/;"	f	class:fuzzer::Fuzzer
AlarmHandler	FuzzerUtil.cpp	/^static void AlarmHandler(int, siginfo_t *, void *) {$/;"	f	namespace:fuzzer
AllDiffs	FuzzerInternal.h	/^  Diff AllDiffs;$/;"	m	class:fuzzer::Fuzzer
AllInputsAreFiles	FuzzerDriver.cpp	/^static bool AllInputsAreFiles() {$/;"	f	namespace:fuzzer
AllocTracer	FuzzerLoop.cpp	/^static thread_local MallocFreeTracer AllocTracer;$/;"	m	namespace:fuzzer	file:
ArtifactPrefix	FuzzerInternal.h	/^    std::string ArtifactPrefix     = ".\/";$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
AssignTaintLabels	FuzzerTraceState.cpp	/^void Fuzzer::AssignTaintLabels(uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::Fuzzer
AutoDictAdds	FuzzerTraceState.cpp	/^  size_t AutoDictAdds = 0;$/;"	m	class:fuzzer::TraceState	file:
AutoDictUnitCounts	FuzzerTraceState.cpp	/^  std::map<Word, size_t> AutoDictUnitCounts;$/;"	m	class:fuzzer::TraceState	file:
BLOCK_LENGTH	FuzzerSHA1.cpp	49;"	d	file:
Base64	FuzzerUtil.cpp	/^std::string Base64(const Unit &U) {$/;"	f	namespace:fuzzer
Beg	FuzzerTraceState.cpp	/^  uint16_t Beg, End;  \/\/ Range is [Beg, End), thus Beg==End is an empty range.$/;"	m	struct:fuzzer::LabelRange	file:
BlockCoverage	FuzzerInternal.h	/^    size_t BlockCoverage;$/;"	m	struct:fuzzer::Fuzzer::Coverage
BuiltinEngine	FuzzerLoop.cpp	/^thread_local bool BuiltinEngine;$/;"	m	namespace:fuzzer	file:
CB	FuzzerInternal.h	/^  UserCallback CB;$/;"	m	class:fuzzer::Fuzzer
CHECK_WEAK_API_FUNCTION	FuzzerLoop.cpp	99;"	d	file:
CallerCalleeCoverage	FuzzerInternal.h	/^    size_t CallerCalleeCoverage;$/;"	m	struct:fuzzer::Fuzzer::Coverage
CheckFnPtr	FuzzerExtFunctionsWeak.cpp	/^static void CheckFnPtr(void *FnPtr, const char *FnName, bool WarnIfMissing) {$/;"	f	file:
ChooseUnitIdxToMutate	FuzzerLoop.cpp	/^size_t Fuzzer::ChooseUnitIdxToMutate() {$/;"	f	class:fuzzer::Fuzzer
ChooseUnitToMutate	FuzzerInternal.h	/^  const Unit &ChooseUnitToMutate() { return Corpus[ChooseUnitIdxToMutate()]; };$/;"	f	class:fuzzer::Fuzzer
ClearAutoDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::ClearAutoDictionary() {$/;"	f	class:fuzzer::MutationDispatcher
CloseStdout	FuzzerIO.cpp	/^void CloseStdout() { close(1); }$/;"	f	namespace:fuzzer
ComputeCmp	FuzzerTraceState.cpp	/^bool ComputeCmp(size_t CmpType, U Arg1, U Arg2) {$/;"	f	namespace:fuzzer
ComputeCmp	FuzzerTraceState.cpp	/^static bool ComputeCmp(size_t CmpSize, size_t CmpType, uint64_t Arg1,$/;"	f	namespace:fuzzer
ComputeSHA1	FuzzerSHA1.cpp	/^void fuzzer::ComputeSHA1(const uint8_t *Data, size_t Len, uint8_t *Out) {$/;"	f	class:fuzzer
ContainsWord	FuzzerInternal.h	/^  bool ContainsWord(const Word &W) const {$/;"	f	class:fuzzer::Dictionary
CopyFileToErr	FuzzerIO.cpp	/^void CopyFileToErr(const std::string &Path) {$/;"	f	namespace:fuzzer
Corpus	FuzzerInternal.h	/^  const std::vector<Unit> *Corpus = nullptr;$/;"	m	class:fuzzer::MutationDispatcher
Corpus	FuzzerInternal.h	/^  std::vector<Unit> Corpus;$/;"	m	class:fuzzer::Fuzzer
CorpusDistribution	FuzzerInternal.h	/^  std::piecewise_constant_distribution<double> CorpusDistribution;$/;"	m	class:fuzzer::Fuzzer
CorpusSize	FuzzerInternal.h	/^  size_t CorpusSize() const { return Corpus.size(); }$/;"	f	class:fuzzer::Fuzzer
CounterBitmap	FuzzerInternal.h	/^    std::vector<uint8_t> CounterBitmap;$/;"	m	struct:fuzzer::Fuzzer::Coverage
CounterBitmapBits	FuzzerInternal.h	/^    size_t CounterBitmapBits;$/;"	m	struct:fuzzer::Fuzzer::Coverage
CovDiff	FuzzerLoop.cpp	/^  static bool CovDiff(const Fuzzer::FuzzingOptions &Options,$/;"	f	struct:fuzzer::DiffController
CovDiffs	FuzzerInternal.h	/^    std::set<std::vector<int> > CovDiffs;$/;"	m	struct:fuzzer::Fuzzer::Diff
CovPaths	FuzzerInternal.h	/^    std::map<std::string, int> CovPaths;$/;"	m	struct:fuzzer::Fuzzer::Diff
CovTries	FuzzerInternal.h	/^    std::map<int, std::vector<fuzzer::FuzzerCallTrie> > CovTries;$/;"	m	struct:fuzzer::Fuzzer::Diff
Coverage	FuzzerInternal.h	/^    Coverage() { Reset(); }$/;"	f	struct:fuzzer::Fuzzer::Coverage
Coverage	FuzzerInternal.h	/^  struct Coverage {$/;"	s	class:fuzzer::Fuzzer
CoverageController	FuzzerLoop.cpp	/^struct CoverageController {$/;"	s	namespace:fuzzer	file:
CrashCallback	FuzzerLoop.cpp	/^void Fuzzer::CrashCallback() {$/;"	f	class:fuzzer::Fuzzer
CrashHandler	FuzzerUtil.cpp	/^static void CrashHandler(int, siginfo_t *, void *) {$/;"	f	namespace:fuzzer
CrossOver	FuzzerCrossOver.cpp	/^size_t MutationDispatcher::CrossOver(const uint8_t *Data1, size_t Size1,$/;"	f	class:fuzzer::MutationDispatcher
CurrentDictionaryEntrySequence	FuzzerInternal.h	/^  std::vector<DictionaryEntry *> CurrentDictionaryEntrySequence;$/;"	m	class:fuzzer::MutationDispatcher
CurrentInterval	FuzzerLoop.cpp	/^thread_local int CurrentInterval = 0;$/;"	m	namespace:fuzzer	file:
CurrentMap	FuzzerTracePC.cpp	/^static PcCoverageMap CurrentMap;$/;"	m	namespace:fuzzer	file:
CurrentMutatorSequence	FuzzerInternal.h	/^  std::vector<Mutator> CurrentMutatorSequence;$/;"	m	class:fuzzer::MutationDispatcher
CurrentUnitData	FuzzerInternal.h	/^  uint8_t *CurrentUnitData = nullptr;$/;"	m	class:fuzzer::Fuzzer
CurrentUnitSize	FuzzerInternal.h	/^  std::atomic<size_t> CurrentUnitSize;$/;"	m	class:fuzzer::Fuzzer
DE	FuzzerInternal.h	/^  DictionaryEntry DE[kMaxDictSize];$/;"	m	class:fuzzer::Dictionary
DFSanCmpCallback	FuzzerTraceState.cpp	/^void TraceState::DFSanCmpCallback(uintptr_t PC, size_t CmpSize, size_t CmpType,$/;"	f	class:fuzzer::TraceState
DFSanMemcmpCallback	FuzzerTraceState.cpp	/^void TraceState::DFSanMemcmpCallback(size_t CmpSize, const uint8_t *Data1,$/;"	f	class:fuzzer::TraceState
DFSanSwitchCallback	FuzzerTraceState.cpp	/^void TraceState::DFSanSwitchCallback(uint64_t PC, size_t ValSizeInBits,$/;"	f	class:fuzzer::TraceState
DIFF_ERROR	FuzzerInternal.h	/^  int DIFF_ERROR   = 1;$/;"	m	class:fuzzer::Fuzzer
DIFF_SUCCESS	FuzzerInternal.h	/^  int DIFF_SUCCESS = 0;$/;"	m	class:fuzzer::Fuzzer
Data	FuzzerInternal.h	/^  uint8_t Data[kMaxSize];$/;"	m	class:fuzzer::FixedWord
DeathCallback	FuzzerLoop.cpp	/^void Fuzzer::DeathCallback() {$/;"	f	class:fuzzer::Fuzzer
DebugString	FuzzerLoop.cpp	/^std::string Fuzzer::Coverage::DebugString() const {$/;"	f	class:fuzzer::Fuzzer::Coverage
Default	FuzzerDriver.cpp	/^  int   Default;$/;"	m	struct:fuzzer::FlagDescription	file:
DefaultMin	FuzzerInternal.h	/^    bool DefaultMin         = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
DefaultMutate	FuzzerMutate.cpp	/^size_t MutationDispatcher::DefaultMutate(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
DefaultMutators	FuzzerInternal.h	/^  std::vector<Mutator> DefaultMutators;$/;"	m	class:fuzzer::MutationDispatcher
Description	FuzzerDriver.cpp	/^  const char *Description;$/;"	m	struct:fuzzer::FlagDescription	file:
DetectLeaks	FuzzerInternal.h	/^    bool DetectLeaks        = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
Dictionary	FuzzerInternal.h	/^class Dictionary {$/;"	c	namespace:fuzzer
DictionaryEntry	FuzzerInternal.h	/^  DictionaryEntry() {}$/;"	f	class:fuzzer::DictionaryEntry
DictionaryEntry	FuzzerInternal.h	/^  DictionaryEntry(Word W) : W(W) {}$/;"	f	class:fuzzer::DictionaryEntry
DictionaryEntry	FuzzerInternal.h	/^  DictionaryEntry(Word W, size_t PositionHint) : W(W), PositionHint(PositionHint) {}$/;"	f	class:fuzzer::DictionaryEntry
DictionaryEntry	FuzzerInternal.h	/^class DictionaryEntry {$/;"	c	namespace:fuzzer
Diff	FuzzerInternal.h	/^    Diff() { Reset(); }$/;"	f	struct:fuzzer::Fuzzer::Diff
Diff	FuzzerInternal.h	/^  struct Diff {$/;"	s	class:fuzzer::Fuzzer
DiffController	FuzzerLoop.cpp	/^struct DiffController {$/;"	s	namespace:fuzzer	file:
DiffCov	FuzzerInternal.h	/^    bool DiffCov            = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
DiffPaths	FuzzerInternal.h	/^    bool DiffPaths          = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
DiffRand	FuzzerInternal.h	/^    bool DiffRand           = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
DiffRet	FuzzerInternal.h	/^    bool DiffRet           = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
DiffTrace	FuzzerInternal.h	/^    bool DiffTrace          = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
DirPlusFile	FuzzerIO.cpp	/^std::string DirPlusFile(const std::string &DirPath,$/;"	f	namespace:fuzzer
DoCrossOver	FuzzerInternal.h	/^    bool DoCrossOver        = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
Drill	FuzzerLoop.cpp	/^void Fuzzer::Drill() {$/;"	f	class:fuzzer::Fuzzer
DumpCurrentUnit	FuzzerLoop.cpp	/^void Fuzzer::DumpCurrentUnit(const char *Prefix) {$/;"	f	class:fuzzer::Fuzzer
DupAndCloseStderr	FuzzerIO.cpp	/^void DupAndCloseStderr() {$/;"	f	namespace:fuzzer
EF	FuzzerInternal.h	/^  const ExternalFunctions EF;$/;"	m	class:fuzzer::Fuzzer
EF	FuzzerInternal.h	/^  const ExternalFunctions EF;$/;"	m	class:fuzzer::MutationDispatcher
EXT_FUNC	FuzzerExtFunctions.h	34;"	d
EXT_FUNC	FuzzerExtFunctions.h	39;"	d
EXT_FUNC	FuzzerExtFunctionsDlsym.cpp	41;"	d	file:
EXT_FUNC	FuzzerExtFunctionsDlsym.cpp	46;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	22;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	27;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	41;"	d	file:
EXT_FUNC	FuzzerExtFunctionsWeak.cpp	47;"	d	file:
End	FuzzerTraceState.cpp	/^  uint16_t Beg, End;  \/\/ Range is [Beg, End), thus Beg==End is an empty range.$/;"	m	struct:fuzzer::LabelRange	file:
EnsureDfsanLabels	FuzzerTraceState.cpp	/^  void EnsureDfsanLabels(size_t Size) {$/;"	f	class:fuzzer::TraceState
EpochOfLastReadOfOutputCorpus	FuzzerInternal.h	/^  long EpochOfLastReadOfOutputCorpus = 0;$/;"	m	class:fuzzer::Fuzzer
ErrorExitCode	FuzzerInternal.h	/^    int ErrorExitCode       = 77;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
ExactArtifactPath	FuzzerInternal.h	/^    std::string ExactArtifactPath;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
ExecuteCallback	FuzzerLoop.cpp	/^void Fuzzer::ExecuteCallback(const uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::Fuzzer
ExecuteCommand	FuzzerUtil.cpp	/^int ExecuteCommand(const std::string &Command) {$/;"	f	namespace:fuzzer
ExternalFunctions	FuzzerExtFunctions.h	/^struct ExternalFunctions {$/;"	s	namespace:fuzzer
ExternalFunctions	FuzzerExtFunctionsDlsym.cpp	/^ExternalFunctions::ExternalFunctions() {$/;"	f	class:fuzzer::ExternalFunctions
ExternalFunctions	FuzzerExtFunctionsWeak.cpp	/^ExternalFunctions::ExternalFunctions() {$/;"	f	class:fuzzer::ExternalFunctions
F	FuzzerLoop.cpp	/^static Fuzzer *F;$/;"	m	namespace:fuzzer	file:
F	FuzzerTraceState.cpp	/^  const Fuzzer *F;$/;"	m	class:fuzzer::TraceState	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	41;"	d	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	46;"	d	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	53;"	d	file:
FUZZER_DEPRECATED_FLAG	FuzzerDriver.cpp	63;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	42;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	47;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	55;"	d	file:
FUZZER_FLAG_INT	FuzzerDriver.cpp	64;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	44;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	49;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	60;"	d	file:
FUZZER_FLAG_STRING	FuzzerDriver.cpp	66;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	43;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	48;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	57;"	d	file:
FUZZER_FLAG_UNSIGNED	FuzzerDriver.cpp	65;"	d	file:
FileToString	FuzzerIO.cpp	/^std::string FileToString(const std::string &Path) {$/;"	f	namespace:fuzzer
FileToVector	FuzzerIO.cpp	/^Unit FileToVector(const std::string &Path, size_t MaxSize) {$/;"	f	namespace:fuzzer
FindExtraUnits	FuzzerLoop.cpp	/^UnitVector Fuzzer::FindExtraUnits(const UnitVector &Initial,$/;"	f	class:fuzzer::Fuzzer
FixedWord	FuzzerInternal.h	/^  FixedWord() {}$/;"	f	class:fuzzer::FixedWord
FixedWord	FuzzerInternal.h	/^  FixedWord(const uint8_t *B, uint8_t S) { Set(B, S); }$/;"	f	class:fuzzer::FixedWord
FixedWord	FuzzerInternal.h	/^template <size_t kMaxSize> class FixedWord {$/;"	c	namespace:fuzzer
FlagDescription	FuzzerDriver.cpp	/^struct FlagDescription {$/;"	s	namespace:fuzzer	file:
FlagValue	FuzzerDriver.cpp	/^static const char *FlagValue(const char *Param, const char *Name) {$/;"	f	namespace:fuzzer
Flags	FuzzerDriver.cpp	/^} Flags;$/;"	m	namespace:fuzzer	typeref:struct:fuzzer::__anon1	file:
FlipRandomBit	FuzzerMutate.cpp	/^static char FlipRandomBit(char X, Random &Rand) {$/;"	f	namespace:fuzzer
Fn	FuzzerInternal.h	/^    size_t (MutationDispatcher::*Fn)(uint8_t *Data, size_t Size, size_t Max);$/;"	m	struct:fuzzer::MutationDispatcher::Mutator
Frees	FuzzerLoop.cpp	/^  size_t Frees;$/;"	m	struct:fuzzer::MallocFreeTracer	file:
Fuzzer	FuzzerInternal.h	/^class Fuzzer {$/;"	c	namespace:fuzzer
Fuzzer	FuzzerLoop.cpp	/^Fuzzer::Fuzzer(UserCallback CB, MutationDispatcher &MD, FuzzingOptions Options)$/;"	f	class:fuzzer::Fuzzer
FuzzerCallTrie	FuzzerCallTrie.cpp	/^FuzzerCallTrie::FuzzerCallTrie(uint64_t root_v) {$/;"	f	class:fuzzer::FuzzerCallTrie
FuzzerCallTrie	FuzzerCallTrie.cpp	/^class FuzzerCallTrie$/;"	c	namespace:fuzzer	file:
FuzzerCallTrie	FuzzerInternal.h	/^class FuzzerCallTrie$/;"	c	namespace:fuzzer
FuzzerDriver	FuzzerDriver.cpp	/^int FuzzerDriver(int *argc, char ***argv, UserCallback Callback) {$/;"	f	namespace:fuzzer
FuzzingOptions	FuzzerInternal.h	/^  struct FuzzingOptions {$/;"	s	class:fuzzer::Fuzzer
GetCurrentUnitInFuzzingThead	FuzzerLoop.cpp	/^size_t Fuzzer::GetCurrentUnitInFuzzingThead(const uint8_t **Data) const {$/;"	f	class:fuzzer::Fuzzer
GetDiffIdx	FuzzerCallTrie.cpp	/^int64_t FuzzerCallTrie::GetDiffIdx(FuzzerCallTrie *t,$/;"	f	class:fuzzer::FuzzerCallTrie
GetEpoch	FuzzerIO.cpp	/^static long GetEpoch(const std::string &Path) {$/;"	f	namespace:fuzzer
GetFnPtr	FuzzerExtFunctionsDlsym.cpp	/^static T GetFnPtr(const char *FnName, bool WarnIfMissing) {$/;"	f	file:
GetLabelRange	FuzzerTraceState.cpp	/^LabelRange TraceState::GetLabelRange(dfsan_label L) {$/;"	f	class:fuzzer::TraceState
GetMD	FuzzerInternal.h	/^  MutationDispatcher &GetMD() { return MD; }$/;"	f	class:fuzzer::Fuzzer
GetMaxSize	FuzzerInternal.h	/^  static size_t GetMaxSize() { return kMaxSize; }$/;"	f	class:fuzzer::FixedWord
GetPeakRSSMb	FuzzerUtil.cpp	/^size_t GetPeakRSSMb() {$/;"	f	namespace:fuzzer
GetPid	FuzzerUtil.cpp	/^int GetPid() { return getpid(); }$/;"	f	namespace:fuzzer
GetPositionHint	FuzzerInternal.h	/^  size_t GetPositionHint() const {$/;"	f	class:fuzzer::DictionaryEntry
GetRand	FuzzerInternal.h	/^  Random &GetRand() { return Rand; }$/;"	f	class:fuzzer::MutationDispatcher
GetSuccessCount	FuzzerInternal.h	/^  size_t GetSuccessCount() const {return SuccessCount; }$/;"	f	class:fuzzer::DictionaryEntry
GetUseCount	FuzzerInternal.h	/^  size_t GetUseCount() const { return UseCount; }$/;"	f	class:fuzzer::DictionaryEntry
GetW	FuzzerInternal.h	/^  const Word &GetW() const { return W; }$/;"	f	class:fuzzer::DictionaryEntry
Get_mt19937	FuzzerInternal.h	/^  std::mt19937 &Get_mt19937() { return R; }$/;"	f	class:fuzzer::Random
GlobalBufferBits	FuzzerInternal.h	/^    size_t GlobalBufferBits;$/;"	m	struct:fuzzer::Fuzzer::Diff
GlobalBufferPC	FuzzerInternal.h	/^    std::set<size_t> GlobalBufferPC;$/;"	m	struct:fuzzer::Fuzzer::Diff
HASH_LENGTH	FuzzerSHA1.cpp	48;"	d	file:
HandlePC	FuzzerTracePC.cpp	/^static void HandlePC(uint32_t PC) {$/;"	f	namespace:fuzzer
HasMoreMallocsThanFrees	FuzzerInternal.h	/^  bool HasMoreMallocsThanFrees = false;$/;"	m	class:fuzzer::Fuzzer
HasPositionHint	FuzzerInternal.h	/^  bool HasPositionHint() const { return PositionHint != std::numeric_limits<size_t>::max(); }$/;"	f	class:fuzzer::DictionaryEntry
Hash	FuzzerUtil.cpp	/^std::string Hash(const Unit &U) {$/;"	f	namespace:fuzzer
HashFuzzy	FuzzerUtil.cpp	/^std::string HashFuzzy(const uint8_t *Data, size_t Size) {$/;"	f	namespace:fuzzer
HashSha1	FuzzerUtil.cpp	/^std::string HashSha1(const uint8_t *Data, size_t Size) {$/;"	f	namespace:fuzzer
ICMP_EQ	FuzzerTraceState.cpp	/^  ICMP_EQ = 32,  \/\/\/< equal$/;"	e	enum:fuzzer::Predicate	file:
ICMP_NE	FuzzerTraceState.cpp	/^  ICMP_NE = 33,  \/\/\/< not equal$/;"	e	enum:fuzzer::Predicate	file:
ICMP_SGE	FuzzerTraceState.cpp	/^  ICMP_SGE = 39, \/\/\/< signed greater or equal$/;"	e	enum:fuzzer::Predicate	file:
ICMP_SGT	FuzzerTraceState.cpp	/^  ICMP_SGT = 38, \/\/\/< signed greater than$/;"	e	enum:fuzzer::Predicate	file:
ICMP_SLE	FuzzerTraceState.cpp	/^  ICMP_SLE = 41, \/\/\/< signed less or equal$/;"	e	enum:fuzzer::Predicate	file:
ICMP_SLT	FuzzerTraceState.cpp	/^  ICMP_SLT = 40, \/\/\/< signed less than$/;"	e	enum:fuzzer::Predicate	file:
ICMP_UGE	FuzzerTraceState.cpp	/^  ICMP_UGE = 35, \/\/\/< unsigned greater or equal$/;"	e	enum:fuzzer::Predicate	file:
ICMP_UGT	FuzzerTraceState.cpp	/^  ICMP_UGT = 34, \/\/\/< unsigned greater than$/;"	e	enum:fuzzer::Predicate	file:
ICMP_ULE	FuzzerTraceState.cpp	/^  ICMP_ULE = 37, \/\/\/< unsigned less or equal$/;"	e	enum:fuzzer::Predicate	file:
ICMP_ULT	FuzzerTraceState.cpp	/^  ICMP_ULT = 36, \/\/\/< unsigned less than$/;"	e	enum:fuzzer::Predicate	file:
InFuzzingThread	FuzzerInternal.h	/^  bool InFuzzingThread() const { return IsMyThread; }$/;"	f	class:fuzzer::Fuzzer
IncSuccessCount	FuzzerInternal.h	/^  void IncSuccessCount() { SuccessCount++; }$/;"	f	class:fuzzer::DictionaryEntry
IncUseCount	FuzzerInternal.h	/^  void IncUseCount() { UseCount++; }$/;"	f	class:fuzzer::DictionaryEntry
InitMutationDistribution	FuzzerLoop.cpp	/^void Fuzzer::InitMutationDistribution() {$/;"	f	class:fuzzer::Fuzzer
InitTries	FuzzerLoop.cpp	/^  static void InitTries(Fuzzer::Diff *D, size_t n)  {$/;"	f	struct:fuzzer::DiffController
InitializeTraceState	FuzzerTraceState.cpp	/^void Fuzzer::InitializeTraceState() {$/;"	f	class:fuzzer::Fuzzer
Inputs	FuzzerDriver.cpp	/^static std::vector<std::string> *Inputs;$/;"	m	namespace:fuzzer	file:
IntFlag	FuzzerDriver.cpp	/^  int   *IntFlag;$/;"	m	struct:fuzzer::FlagDescription	file:
InternalStrnlen	FuzzerTraceState.cpp	/^static size_t InternalStrnlen(const char *S, size_t MaxLen) {$/;"	f	namespace:fuzzer
InterruptCallback	FuzzerLoop.cpp	/^void Fuzzer::InterruptCallback() {$/;"	f	class:fuzzer::Fuzzer
InterruptHandler	FuzzerUtil.cpp	/^static void InterruptHandler(int, siginfo_t *, void *) {$/;"	f	namespace:fuzzer
IntervalScore	FuzzerLoop.cpp	/^thread_local size_t IntervalScore;$/;"	m	namespace:fuzzer	file:
IsASCII	FuzzerUtil.cpp	/^bool IsASCII(const Unit &U) { return IsASCII(U.data(), U.size()); }$/;"	f	namespace:fuzzer
IsASCII	FuzzerUtil.cpp	/^bool IsASCII(const uint8_t *Data, size_t Size) {$/;"	f	namespace:fuzzer
IsFile	FuzzerIO.cpp	/^bool IsFile(const std::string &Path) {$/;"	f	namespace:fuzzer
IsMyThread	FuzzerInternal.h	/^  static thread_local bool IsMyThread;$/;"	m	class:fuzzer::Fuzzer
IsMyThread	FuzzerLoop.cpp	/^thread_local bool Fuzzer::IsMyThread;$/;"	m	class:fuzzer::Fuzzer	file:
IsNewRetTuple	FuzzerLoop.cpp	/^  static bool IsNewRetTuple(const Fuzzer::FuzzingOptions &Options,$/;"	f	struct:fuzzer::DiffController
IsTwoByteData	FuzzerTraceState.cpp	/^  bool IsTwoByteData(uint64_t Data) {$/;"	f	class:fuzzer::TraceState	file:
Join	FuzzerTraceState.cpp	/^  LabelRange &Join(LabelRange LR) {$/;"	f	struct:fuzzer::LabelRange
Join	FuzzerTraceState.cpp	/^  static LabelRange Join(LabelRange LR1, LabelRange LR2) {$/;"	f	struct:fuzzer::LabelRange
LIBFUZZER_APPLE	FuzzerInternal.h	37;"	d
LIBFUZZER_APPLE	FuzzerInternal.h	40;"	d
LIBFUZZER_LINUX	FuzzerInternal.h	36;"	d
LIBFUZZER_LINUX	FuzzerInternal.h	39;"	d
LLVMFuzzerMutate	FuzzerLoop.cpp	/^size_t LLVMFuzzerMutate(uint8_t *Data, size_t Size, size_t MaxSize) {$/;"	f
LLVM_FUZZER_ADAPTER_H	FuzzerFnAdapter.h	16;"	d
LLVM_FUZZER_DEFINES_SANITIZER_WEAK_HOOOKS	FuzzerTraceState.cpp	569;"	d	file:
LLVM_FUZZER_DFSAN_H	FuzzerDFSan.h	13;"	d
LLVM_FUZZER_EXT_FUNCTIONS_H	FuzzerExtFunctions.h	12;"	d
LLVM_FUZZER_INTERFACE_H	FuzzerInterface.h	20;"	d
LLVM_FUZZER_INTERNAL_H	FuzzerInternal.h	13;"	d
LLVM_FUZZER_SUPPORTS_DFSAN	FuzzerDFSan.h	15;"	d
LLVM_FUZZER_SUPPORTS_DFSAN	FuzzerDFSan.h	19;"	d
LLVM_FUZZER_SUPPORTS_DFSAN	FuzzerDFSan.h	20;"	d
LLVM_FUZZER_TRACE_PC_H	FuzzerTracePC.h	15;"	d
LabelRange	FuzzerTraceState.cpp	/^  LabelRange(uint16_t Beg = 0, uint16_t End = 0) : Beg(Beg), End(End) {}$/;"	f	struct:fuzzer::LabelRange
LabelRange	FuzzerTraceState.cpp	/^struct LabelRange {$/;"	s	namespace:fuzzer	file:
LabelRanges	FuzzerTraceState.cpp	/^  LabelRange LabelRanges[1 << (sizeof(dfsan_label) * 8)];$/;"	m	class:fuzzer::TraceState	file:
LastDfsanLabel	FuzzerTraceState.cpp	/^  size_t LastDfsanLabel = 0;$/;"	m	class:fuzzer::TraceState	file:
LazyAllocateCurrentUnitData	FuzzerLoop.cpp	/^void Fuzzer::LazyAllocateCurrentUnitData() {$/;"	f	class:fuzzer::Fuzzer
ListFilesInDirRecursive	FuzzerIO.cpp	/^static void ListFilesInDirRecursive(const std::string &Dir, long *Epoch,$/;"	f	namespace:fuzzer
Loop	FuzzerLoop.cpp	/^void Fuzzer::Loop() {$/;"	f	class:fuzzer::Fuzzer
MD	FuzzerInternal.h	/^  MutationDispatcher &MD;$/;"	m	class:fuzzer::Fuzzer
MD	FuzzerTraceState.cpp	/^  MutationDispatcher &MD;$/;"	m	class:fuzzer::TraceState	file:
MallocFreeTracer	FuzzerLoop.cpp	/^struct MallocFreeTracer {$/;"	s	namespace:fuzzer	file:
Mallocs	FuzzerLoop.cpp	/^  size_t Mallocs;$/;"	m	struct:fuzzer::MallocFreeTracer	file:
ManualDictionary	FuzzerInternal.h	/^  Dictionary ManualDictionary;$/;"	m	class:fuzzer::MutationDispatcher
Map	FuzzerTracePC.h	/^  uintptr_t Map[kMapSizeInWords] __attribute__((aligned(512)));$/;"	m	struct:fuzzer::PcCoverageMap
MaxCoverage	FuzzerInternal.h	/^  Coverage MaxCoverage;$/;"	m	class:fuzzer::Fuzzer
MaxLen	FuzzerInternal.h	/^    size_t MaxLen           = 0;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
MaxNumberOfRuns	FuzzerInternal.h	/^    size_t MaxNumberOfRuns  = ULONG_MAX;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
MaxTotalTimeSec	FuzzerInternal.h	/^    int MaxTotalTimeSec     = 0;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
MaxUnitSizeInCorpus	FuzzerLoop.cpp	/^size_t Fuzzer::MaxUnitSizeInCorpus() const {$/;"	f	class:fuzzer::Fuzzer
Merge	FuzzerLoop.cpp	/^void Fuzzer::Merge(const std::vector<std::string> &Corpora) {$/;"	f	class:fuzzer::Fuzzer
MergeFrom	FuzzerTracePC.cpp	/^size_t PcCoverageMap::MergeFrom(const PcCoverageMap &Other) {$/;"	f	class:fuzzer::PcCoverageMap
MissingWeakApiFunction	FuzzerLoop.cpp	/^static void MissingWeakApiFunction(const char *FnName) {$/;"	f	namespace:fuzzer
Mu	FuzzerDriver.cpp	/^static std::mutex Mu;$/;"	m	namespace:fuzzer	file:
Mutate	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate(uint8_t *Data, size_t Size, size_t MaxSize) {$/;"	f	class:fuzzer::MutationDispatcher
MutateAndTestOne	FuzzerLoop.cpp	/^void Fuzzer::MutateAndTestOne() {$/;"	f	class:fuzzer::Fuzzer
MutateDepth	FuzzerInternal.h	/^    int MutateDepth         = 5;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
MutateImpl	FuzzerMutate.cpp	/^size_t MutationDispatcher::MutateImpl(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
MutateInPlaceHere	FuzzerInternal.h	/^  std::vector<uint8_t> MutateInPlaceHere;$/;"	m	class:fuzzer::MutationDispatcher
Mutate_AddWordFromManualDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromManualDictionary(uint8_t *Data,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_AddWordFromPersistentAutoDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromPersistentAutoDictionary($/;"	f	class:fuzzer::MutationDispatcher
Mutate_AddWordFromTemporaryAutoDictionary	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_AddWordFromTemporaryAutoDictionary($/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeASCIIInteger	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeASCIIInteger(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeBit	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeBit(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ChangeByte	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ChangeByte(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_CrossOver	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_CrossOver(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_Custom	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_Custom(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_EraseByte	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_EraseByte(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_InsertByte	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_InsertByte(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
Mutate_ShuffleBytes	FuzzerMutate.cpp	/^size_t MutationDispatcher::Mutate_ShuffleBytes(uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::MutationDispatcher
MutationDispatcher	FuzzerInternal.h	/^class MutationDispatcher {$/;"	c	namespace:fuzzer
MutationDispatcher	FuzzerMutate.cpp	/^MutationDispatcher::MutationDispatcher(Random &Rand) : Rand(Rand) {$/;"	f	class:fuzzer::MutationDispatcher
MutationWeights	FuzzerInternal.h	/^    std::vector<size_t> MutationWeights;$/;"	m	struct:fuzzer::Fuzzer::Diff
Mutations	FuzzerTraceState.cpp	/^  TraceBasedMutation Mutations[kMaxMutations];$/;"	m	class:fuzzer::TraceState	file:
Mutator	FuzzerInternal.h	/^  struct Mutator {$/;"	s	class:fuzzer::MutationDispatcher
Mutators	FuzzerInternal.h	/^  std::vector<Mutator> Mutators;$/;"	m	class:fuzzer::MutationDispatcher
MyStol	FuzzerDriver.cpp	/^static long MyStol(const char *Str) {$/;"	f	namespace:fuzzer
NO_SANITIZE_MEMORY	FuzzerLoop.cpp	26;"	d	file:
NO_SANITIZE_MEMORY	FuzzerLoop.cpp	29;"	d	file:
NO_SANITIZE_MEMORY	FuzzerLoop.cpp	30;"	d	file:
Name	FuzzerDriver.cpp	/^  const char *Name;$/;"	m	struct:fuzzer::FlagDescription	file:
Name	FuzzerInternal.h	/^    const char *Name;$/;"	m	struct:fuzzer::MutationDispatcher::Mutator
Node	FuzzerCallTrie.cpp	/^struct Node$/;"	s	namespace:fuzzer	file:
Node	FuzzerInternal.h	/^struct Node$/;"	s	namespace:fuzzer
NumMutations	FuzzerTraceState.cpp	/^  size_t NumMutations;$/;"	m	class:fuzzer::TraceState	file:
NumberOfCpuCores	FuzzerUtil.cpp	/^int NumberOfCpuCores() {$/;"	f	namespace:fuzzer
NumberOfLeakDetectionAttempts	FuzzerInternal.h	/^  size_t NumberOfLeakDetectionAttempts = 0;$/;"	m	class:fuzzer::Fuzzer
NumberOfNewUnitsAdded	FuzzerInternal.h	/^  size_t NumberOfNewUnitsAdded = 0;$/;"	m	class:fuzzer::Fuzzer
OnlyASCII	FuzzerInternal.h	/^    bool OnlyASCII          = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
Options	FuzzerInternal.h	/^  FuzzingOptions Options;$/;"	m	class:fuzzer::Fuzzer
Options	FuzzerTraceState.cpp	/^  const Fuzzer::FuzzingOptions &Options;$/;"	m	class:fuzzer::TraceState	file:
OutputCSV	FuzzerInternal.h	/^    bool OutputCSV          = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
OutputCorpus	FuzzerInternal.h	/^    std::string OutputCorpus;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
OutputFile	FuzzerIO.cpp	/^static FILE *OutputFile = stderr;$/;"	m	namespace:fuzzer	file:
Outputs	FuzzerInternal.h	/^    std::set<std::vector<int> > Outputs;$/;"	m	struct:fuzzer::Fuzzer::Diff
PCMap	FuzzerInternal.h	/^    PcCoverageMap PCMap;$/;"	m	struct:fuzzer::Fuzzer::Coverage
ParseDictionaryFile	FuzzerUtil.cpp	/^bool ParseDictionaryFile(const std::string &Text, std::vector<Unit> *Units) {$/;"	f	namespace:fuzzer
ParseFlags	FuzzerDriver.cpp	/^static void ParseFlags(const std::vector<std::string> &Args) {$/;"	f	namespace:fuzzer
ParseGenericIntVector	FuzzerLoop.cpp	/^  static std::vector<int> ParseGenericIntVector(ValContainerInt *ret) {$/;"	f	struct:fuzzer::DiffController
ParseOneDictionaryEntry	FuzzerUtil.cpp	/^bool ParseOneDictionaryEntry(const std::string &Str, Unit *U) {$/;"	f	namespace:fuzzer
ParseOneFlag	FuzzerDriver.cpp	/^static bool ParseOneFlag(const char *Param) {$/;"	f	namespace:fuzzer
PcBufferLen	FuzzerInternal.h	/^    size_t PcBufferLen;$/;"	m	struct:fuzzer::Fuzzer::Coverage
PcCoverageMap	FuzzerTracePC.h	/^struct PcCoverageMap {$/;"	s	namespace:fuzzer
PcMapBits	FuzzerInternal.h	/^    size_t PcMapBits;$/;"	m	struct:fuzzer::Fuzzer::Coverage
PcMapMergeInto	FuzzerTracePC.cpp	/^size_t PcMapMergeInto(PcCoverageMap *Map) {$/;"	f	namespace:fuzzer
PcMapResetCurrent	FuzzerTracePC.cpp	/^void PcMapResetCurrent() {$/;"	f	namespace:fuzzer
PersistentAutoDictionary	FuzzerInternal.h	/^  Dictionary PersistentAutoDictionary;$/;"	m	class:fuzzer::MutationDispatcher
Pos	FuzzerTraceState.cpp	/^  uint32_t Pos;$/;"	m	struct:fuzzer::TraceBasedMutation	file:
PositionHint	FuzzerInternal.h	/^  size_t PositionHint = std::numeric_limits<size_t>::max();$/;"	m	class:fuzzer::DictionaryEntry
Predicate	FuzzerTraceState.cpp	/^enum Predicate {$/;"	g	namespace:fuzzer	file:
PreferSmall	FuzzerInternal.h	/^    bool PreferSmall        = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
Prepare	FuzzerLoop.cpp	/^  static void Prepare(const Fuzzer::FuzzingOptions &Options,$/;"	f	struct:fuzzer::CoverageController
Prev	FuzzerTracePC.cpp	/^static thread_local uintptr_t Prev;$/;"	m	namespace:fuzzer	file:
Print	FuzzerUtil.cpp	/^void Print(const Unit &v, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCII	FuzzerUtil.cpp	/^void PrintASCII(const Unit &U, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCII	FuzzerUtil.cpp	/^void PrintASCII(const Word &W, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCII	FuzzerUtil.cpp	/^void PrintASCII(const uint8_t *Data, size_t Size, const char *PrintAfter) {$/;"	f	namespace:fuzzer
PrintASCIIByte	FuzzerUtil.cpp	/^void PrintASCIIByte(uint8_t Byte) {$/;"	f	namespace:fuzzer
PrintFinalStats	FuzzerInternal.h	/^    bool PrintFinalStats    = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
PrintFinalStats	FuzzerLoop.cpp	/^void Fuzzer::PrintFinalStats() {$/;"	f	class:fuzzer::Fuzzer
PrintHelp	FuzzerDriver.cpp	/^static void PrintHelp() {$/;"	f	namespace:fuzzer
PrintHexArray	FuzzerUtil.cpp	/^void PrintHexArray(const uint8_t *Data, size_t Size,$/;"	f	namespace:fuzzer
PrintMutationSequence	FuzzerMutate.cpp	/^void MutationDispatcher::PrintMutationSequence() {$/;"	f	class:fuzzer::MutationDispatcher
PrintNEW	FuzzerInternal.h	/^    bool PrintNEW           = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
PrintNewCovPcs	FuzzerInternal.h	/^    bool PrintNewCovPcs     = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
PrintRecommendedDictionary	FuzzerMutate.cpp	/^void MutationDispatcher::PrintRecommendedDictionary() {$/;"	f	class:fuzzer::MutationDispatcher
PrintStats	FuzzerLoop.cpp	/^void Fuzzer::PrintStats(const char *Where, const char *End) {$/;"	f	class:fuzzer::Fuzzer
PrintStatusForNewUnit	FuzzerLoop.cpp	/^void Fuzzer::PrintStatusForNewUnit(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
Printf	FuzzerIO.cpp	/^void Printf(const char *Fmt, ...) {$/;"	f	namespace:fuzzer
ProcessStartTime	FuzzerInternal.h	/^  system_clock::time_point ProcessStartTime = system_clock::now();$/;"	m	class:fuzzer::Fuzzer
ProgName	FuzzerDriver.cpp	/^static std::string *ProgName;$/;"	m	namespace:fuzzer	file:
PulseThread	FuzzerDriver.cpp	/^static void PulseThread() {$/;"	f	namespace:fuzzer
R	FuzzerInternal.h	/^  std::mt19937 R;$/;"	m	class:fuzzer::Random
Rand	FuzzerInternal.h	/^  Random &Rand;$/;"	m	class:fuzzer::MutationDispatcher
Rand	FuzzerInternal.h	/^  size_t Rand() { return R(); }$/;"	f	class:fuzzer::Random
RandBool	FuzzerInternal.h	/^  size_t RandBool() { return Rand() % 2; }$/;"	f	class:fuzzer::Random
RandCh	FuzzerMutate.cpp	/^static char RandCh(Random &Rand) {$/;"	f	namespace:fuzzer
Random	FuzzerInternal.h	/^  Random(unsigned int seed) : R(seed) {}$/;"	f	class:fuzzer::Random
Random	FuzzerInternal.h	/^class Random {$/;"	c	namespace:fuzzer
ReadDir	FuzzerInternal.h	/^  void ReadDir(const std::string &Path, long *Epoch, size_t MaxSize) {$/;"	f	class:fuzzer::Fuzzer
ReadDirToVectorOfUnits	FuzzerIO.cpp	/^void ReadDirToVectorOfUnits(const char *Path, std::vector<Unit> *V,$/;"	f	namespace:fuzzer
ReallyHaveDFSan	FuzzerDFSan.h	/^static bool ReallyHaveDFSan() {$/;"	f	namespace:fuzzer
RecordMax	FuzzerLoop.cpp	/^  static bool RecordMax(const Fuzzer::FuzzingOptions &Options,$/;"	f	struct:fuzzer::CoverageController
RecordSuccessfulMutationSequence	FuzzerMutate.cpp	/^void MutationDispatcher::RecordSuccessfulMutationSequence() {$/;"	f	class:fuzzer::MutationDispatcher
RecordingMemcmp	FuzzerTraceState.cpp	/^static bool RecordingMemcmp = false;$/;"	m	namespace:fuzzer	file:
RecordingTraces	FuzzerTraceState.cpp	/^static bool RecordingTraces = false;$/;"	m	namespace:fuzzer	file:
Reload	FuzzerInternal.h	/^    bool Reload             = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
ReportNewCoverage	FuzzerLoop.cpp	/^void Fuzzer::ReportNewCoverage(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
ReportSlowUnits	FuzzerInternal.h	/^    int ReportSlowUnits     = 10;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
RereadOutputCorpus	FuzzerLoop.cpp	/^void Fuzzer::RereadOutputCorpus(size_t MaxSize) {$/;"	f	class:fuzzer::Fuzzer
Reset	FuzzerInternal.h	/^    void Reset() {$/;"	f	struct:fuzzer::Fuzzer::Coverage
Reset	FuzzerInternal.h	/^    void Reset() {$/;"	f	struct:fuzzer::Fuzzer::Diff
Reset	FuzzerLoop.cpp	/^  static void Reset() {$/;"	f	struct:fuzzer::CoverageController
Reset	FuzzerLoop.cpp	/^  static void Reset(Fuzzer::Diff *D) {$/;"	f	struct:fuzzer::DiffController
Reset	FuzzerTracePC.cpp	/^void PcCoverageMap::Reset() { memset(Map, 0, sizeof(Map)); }$/;"	f	class:fuzzer::PcCoverageMap
ResetCounters	FuzzerLoop.cpp	/^  static void ResetCounters(const Fuzzer::FuzzingOptions &Options) {$/;"	f	struct:fuzzer::CoverageController
ResetCoverage	FuzzerLoop.cpp	/^void Fuzzer::ResetCoverage() {$/;"	f	class:fuzzer::Fuzzer
ResetDiff	FuzzerLoop.cpp	/^void Fuzzer::ResetDiff() {$/;"	f	class:fuzzer::Fuzzer
RetTupleHasRetDiff	FuzzerLoop.cpp	/^  static bool RetTupleHasRetDiff(const Fuzzer::FuzzingOptions &Options,$/;"	f	struct:fuzzer::DiffController
RssLimitCallback	FuzzerLoop.cpp	/^void Fuzzer::RssLimitCallback() {$/;"	f	class:fuzzer::Fuzzer
RssLimitMb	FuzzerInternal.h	/^    int RssLimitMb          = 0;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
RssThread	FuzzerDriver.cpp	/^static void RssThread(Fuzzer *F, size_t RssLimitMb) {$/;"	f	namespace:fuzzer
RunInMultipleProcesses	FuzzerDriver.cpp	/^static int RunInMultipleProcesses(const std::vector<std::string> &Args,$/;"	f	namespace:fuzzer
RunOne	FuzzerInternal.h	/^  bool RunOne(const Unit &U) { return RunOne(U.data(), U.size()); }$/;"	f	class:fuzzer::Fuzzer
RunOne	FuzzerLoop.cpp	/^bool Fuzzer::RunOne(const uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::Fuzzer
RunOneAndUpdateCorpus	FuzzerLoop.cpp	/^void Fuzzer::RunOneAndUpdateCorpus(const uint8_t *Data, size_t Size) {$/;"	f	class:fuzzer::Fuzzer
RunOneTest	FuzzerDriver.cpp	/^int RunOneTest(Fuzzer *F, const char *InputFilePath) {$/;"	f	namespace:fuzzer
SHA1_K0	FuzzerSHA1.cpp	77;"	d	file:
SHA1_K20	FuzzerSHA1.cpp	78;"	d	file:
SHA1_K40	FuzzerSHA1.cpp	79;"	d	file:
SHA1_K60	FuzzerSHA1.cpp	80;"	d	file:
SHA_BIG_ENDIAN	FuzzerSHA1.cpp	31;"	d	file:
SaveArtifacts	FuzzerInternal.h	/^    bool SaveArtifacts      = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
SaveCorpus	FuzzerLoop.cpp	/^void Fuzzer::SaveCorpus() {$/;"	f	class:fuzzer::Fuzzer
Set	FuzzerInternal.h	/^  void Set(const uint8_t *B, uint8_t S) {$/;"	f	class:fuzzer::FixedWord
SetCorpus	FuzzerInternal.h	/^  void SetCorpus(const std::vector<Unit> *Corpus) { this->Corpus = Corpus; }$/;"	f	class:fuzzer::MutationDispatcher
SetDeathCallback	FuzzerLoop.cpp	/^void Fuzzer::SetDeathCallback() {$/;"	f	class:fuzzer::Fuzzer
SetMaxLen	FuzzerLoop.cpp	/^void Fuzzer::SetMaxLen(size_t MaxLen) {$/;"	f	class:fuzzer::Fuzzer
SetSigAbrtHandler	FuzzerUtil.cpp	/^void SetSigAbrtHandler() { SetSigaction(SIGABRT, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigBusHandler	FuzzerUtil.cpp	/^void SetSigBusHandler() { SetSigaction(SIGBUS, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigFpeHandler	FuzzerUtil.cpp	/^void SetSigFpeHandler() { SetSigaction(SIGFPE, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigIllHandler	FuzzerUtil.cpp	/^void SetSigIllHandler() { SetSigaction(SIGILL, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigIntHandler	FuzzerUtil.cpp	/^void SetSigIntHandler() { SetSigaction(SIGINT, InterruptHandler); }$/;"	f	namespace:fuzzer
SetSigSegvHandler	FuzzerUtil.cpp	/^void SetSigSegvHandler() { SetSigaction(SIGSEGV, CrashHandler); }$/;"	f	namespace:fuzzer
SetSigTermHandler	FuzzerUtil.cpp	/^void SetSigTermHandler() { SetSigaction(SIGTERM, InterruptHandler); }$/;"	f	namespace:fuzzer
SetSigaction	FuzzerUtil.cpp	/^static void SetSigaction(int signum,$/;"	f	namespace:fuzzer
SetTimer	FuzzerUtil.cpp	/^void SetTimer(int Seconds) {$/;"	f	namespace:fuzzer
ShuffleAndMinimize	FuzzerLoop.cpp	/^void Fuzzer::ShuffleAndMinimize() {$/;"	f	class:fuzzer::Fuzzer
ShuffleAtStartUp	FuzzerInternal.h	/^    bool ShuffleAtStartUp   = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
ShuffleCorpus	FuzzerLoop.cpp	/^void Fuzzer::ShuffleCorpus(UnitVector *V) {$/;"	f	class:fuzzer::Fuzzer
Singleton	FuzzerTraceState.cpp	/^  static LabelRange Singleton(const dfsan_label_info *LI) {$/;"	f	struct:fuzzer::LabelRange
Size	FuzzerInternal.h	/^  size_t Size = 0;$/;"	m	class:fuzzer::Dictionary
Size	FuzzerInternal.h	/^  uint8_t Size = 0;$/;"	m	class:fuzzer::FixedWord
SleepSeconds	FuzzerUtil.cpp	/^void SleepSeconds(int Seconds) {$/;"	f	namespace:fuzzer
SlidingWindow	FuzzerInternal.h	/^    bool SlidingWindow      = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
Start	FuzzerLoop.cpp	/^  void Start() {$/;"	f	struct:fuzzer::MallocFreeTracer
StartAtPosition	FuzzerInternal.h	/^    size_t StartAtPosition  = 0;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
StartMutationSequence	FuzzerMutate.cpp	/^void MutationDispatcher::StartMutationSequence() {$/;"	f	class:fuzzer::MutationDispatcher
StartRssThread	FuzzerDriver.cpp	/^static void StartRssThread(Fuzzer *F, size_t RssLimitMb) {$/;"	f	namespace:fuzzer
StartTraceRecording	FuzzerTraceState.cpp	/^  void StartTraceRecording() {$/;"	f	class:fuzzer::TraceState
StartTraceRecording	FuzzerTraceState.cpp	/^void Fuzzer::StartTraceRecording() {$/;"	f	class:fuzzer::Fuzzer
StaticAlarmCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticAlarmCallback() {$/;"	f	class:fuzzer::Fuzzer
StaticCrashSignalCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticCrashSignalCallback() {$/;"	f	class:fuzzer::Fuzzer
StaticDeathCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticDeathCallback() {$/;"	f	class:fuzzer::Fuzzer
StaticInterruptCallback	FuzzerLoop.cpp	/^void Fuzzer::StaticInterruptCallback() {$/;"	f	class:fuzzer::Fuzzer
Stop	FuzzerLoop.cpp	/^  bool Stop() { return Mallocs > Frees; }$/;"	f	struct:fuzzer::MallocFreeTracer
StopTraceRecording	FuzzerTraceState.cpp	/^  void StopTraceRecording() {$/;"	f	class:fuzzer::TraceState
StopTraceRecording	FuzzerTraceState.cpp	/^void Fuzzer::StopTraceRecording() {$/;"	f	class:fuzzer::Fuzzer
StrFlag	FuzzerDriver.cpp	/^  const char **StrFlag;$/;"	m	struct:fuzzer::FlagDescription	file:
SuccessCount	FuzzerInternal.h	/^  size_t SuccessCount = 0;$/;"	m	class:fuzzer::DictionaryEntry
TS	FuzzerTraceState.cpp	/^static TraceState *TS;$/;"	m	namespace:fuzzer	file:
TempAutoDictionary	FuzzerInternal.h	/^  Dictionary TempAutoDictionary;$/;"	m	class:fuzzer::MutationDispatcher
TimeOfLongestUnitInSeconds	FuzzerInternal.h	/^  long TimeOfLongestUnitInSeconds = 0;$/;"	m	class:fuzzer::Fuzzer
TimeoutExitCode	FuzzerInternal.h	/^    int TimeoutExitCode     = 77;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
ToASCII	FuzzerUtil.cpp	/^bool ToASCII(uint8_t *Data, size_t Size) {$/;"	f	namespace:fuzzer
TotalNumberOfDiffs	FuzzerInternal.h	/^  size_t TotalNumberOfDiffs = 0;$/;"	m	class:fuzzer::Fuzzer
TotalNumberOfRuns	FuzzerInternal.h	/^  size_t TotalNumberOfRuns = 0;$/;"	m	class:fuzzer::Fuzzer
TraceBasedMutation	FuzzerTraceState.cpp	/^struct TraceBasedMutation {$/;"	s	namespace:fuzzer	file:
TraceCmpCallback	FuzzerTraceState.cpp	/^void TraceState::TraceCmpCallback(uintptr_t PC, size_t CmpSize, size_t CmpType,$/;"	f	class:fuzzer::TraceState
TraceMemcmpCallback	FuzzerTraceState.cpp	/^void TraceState::TraceMemcmpCallback(size_t CmpSize, const uint8_t *Data1,$/;"	f	class:fuzzer::TraceState
TraceState	FuzzerTraceState.cpp	/^  TraceState(MutationDispatcher &MD, const Fuzzer::FuzzingOptions &Options,$/;"	f	class:fuzzer::TraceState
TraceState	FuzzerTraceState.cpp	/^class TraceState {$/;"	c	namespace:fuzzer	file:
TraceSwitchCallback	FuzzerTraceState.cpp	/^void TraceState::TraceSwitchCallback(uintptr_t PC, size_t ValSizeInBits,$/;"	f	class:fuzzer::TraceState
TruncateMaxRuns	FuzzerLoop.cpp	/^static const size_t TruncateMaxRuns = 1000;$/;"	m	namespace:fuzzer	file:
TruncateUnits	FuzzerInternal.h	/^    bool TruncateUnits      = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
TruncateUnits	FuzzerLoop.cpp	/^void Fuzzer::TruncateUnits(std::vector<Unit> *NewCorpus) {$/;"	f	class:fuzzer::Fuzzer
TryDetectingAMemoryLeak	FuzzerLoop.cpp	/^void Fuzzer::TryDetectingAMemoryLeak(const uint8_t *Data, size_t Size,$/;"	f	class:fuzzer::Fuzzer
TryToAddDesiredData	FuzzerTraceState.cpp	/^int TraceState::TryToAddDesiredData(const uint8_t *PresentData,$/;"	f	class:fuzzer::TraceState
TryToAddDesiredData	FuzzerTraceState.cpp	/^int TraceState::TryToAddDesiredData(uint64_t PresentData, uint64_t DesiredData,$/;"	f	class:fuzzer::TraceState
UIntFlag	FuzzerDriver.cpp	/^  unsigned int *UIntFlag;$/;"	m	struct:fuzzer::FlagDescription	file:
UNPACK_SINGLE_PRIMITIVE	FuzzerFnAdapter.h	57;"	d
UNPACK_SINGLE_PRIMITIVE	FuzzerFnAdapter.h	83;"	d
Unit	FuzzerInternal.h	/^typedef std::vector<uint8_t> Unit;$/;"	t	namespace:fuzzer
UnitHadDiff	FuzzerLoop.cpp	/^thread_local bool UnitHadDiff;$/;"	m	namespace:fuzzer	file:
UnitHashesAddedToCorpus	FuzzerInternal.h	/^  std::unordered_set<std::string> UnitHashesAddedToCorpus;$/;"	m	class:fuzzer::Fuzzer
UnitStartTime	FuzzerInternal.h	/^  system_clock::time_point UnitStartTime;$/;"	m	class:fuzzer::Fuzzer
UnitTimeoutSec	FuzzerInternal.h	/^    int UnitTimeoutSec      = 300;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
UnitVector	FuzzerInternal.h	/^typedef std::vector<Unit> UnitVector;$/;"	t	namespace:fuzzer
UnpackImpl	FuzzerFnAdapter.h	/^UnpackImpl(const uint8_t *Data, size_t Size, TupleT *Tuple) {$/;"	f	namespace:fuzzer::impl
UnpackPrimitive	FuzzerFnAdapter.h	/^size_t UnpackPrimitive(const uint8_t *Data, size_t Size, T *Value) {$/;"	f	namespace:fuzzer::impl
UnpackSingle	FuzzerFnAdapter.h	/^size_t UnpackSingle<std::string>(const uint8_t *Data, size_t Size,$/;"	f	namespace:fuzzer::impl
UnpackSingle	FuzzerFnAdapter.h	/^size_t UnpackSingle<std::vector<uint8_t>>(const uint8_t *Data, size_t Size,$/;"	f	namespace:fuzzer::impl
Update	FuzzerTracePC.cpp	/^void PcCoverageMap::Update(uintptr_t Addr) {$/;"	f	class:fuzzer::PcCoverageMap
UpdateCorpusDistribution	FuzzerLoop.cpp	/^void Fuzzer::UpdateCorpusDistribution() {$/;"	f	class:fuzzer::Fuzzer
UpdateDiff	FuzzerLoop.cpp	/^bool Fuzzer::UpdateDiff(const uint8_t *Data, size_t Size, bool IsBuiltinRun) {$/;"	f	class:fuzzer::Fuzzer
UpdateIntervalScoreFromCovDiff	FuzzerLoop.cpp	/^  static void UpdateIntervalScoreFromCovDiff(std::vector<int>& cov_v) {$/;"	f	struct:fuzzer::DiffController
UpdateIntervalScoreFromRetDiff	FuzzerLoop.cpp	/^  static void UpdateIntervalScoreFromRetDiff(bool HasResDiff,$/;"	f	struct:fuzzer::DiffController
UpdateMaxCoverage	FuzzerLoop.cpp	/^bool Fuzzer::UpdateMaxCoverage() {$/;"	f	class:fuzzer::Fuzzer
UpdateTries	FuzzerLoop.cpp	/^  static std::string UpdateTries(bool isMax,$/;"	f	struct:fuzzer::DiffController
UseCount	FuzzerInternal.h	/^  size_t UseCount = 0;$/;"	m	class:fuzzer::DictionaryEntry
UseCounters	FuzzerInternal.h	/^    bool UseCounters        = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
UseFullCoverageSet	FuzzerInternal.h	/^    bool UseFullCoverageSet = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
UseIndirCalls	FuzzerInternal.h	/^    bool UseIndirCalls      = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
UseMemcmp	FuzzerInternal.h	/^    bool UseMemcmp          = true;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
UseTraces	FuzzerInternal.h	/^    bool UseTraces          = false;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
UserCallback	FuzzerInternal.h	/^typedef int (*UserCallback)(const uint8_t *Data, size_t Size);$/;"	t	namespace:fuzzer
ValContainerInt	FuzzerExtFunctions.h	/^struct ValContainerInt {$/;"	s
ValContainerU64	FuzzerExtFunctions.h	/^struct ValContainerU64 {$/;"	s
VectorToString	FuzzerLoop.cpp	/^  static std::string VectorToString(std::vector<int> vec) {$/;"	f	struct:fuzzer::DiffController
Verbosity	FuzzerInternal.h	/^    int Verbosity           = 1;$/;"	m	struct:fuzzer::Fuzzer::FuzzingOptions
W	FuzzerInternal.h	/^  Word W;$/;"	m	class:fuzzer::DictionaryEntry
W	FuzzerTraceState.cpp	/^  Word W;$/;"	m	struct:fuzzer::TraceBasedMutation	file:
WantToHandleOneMoreMutation	FuzzerTraceState.cpp	/^  bool WantToHandleOneMoreMutation() {$/;"	f	class:fuzzer::TraceState	file:
Word	FuzzerInternal.h	/^typedef FixedWord<27> Word; \/\/ 28 bytes.$/;"	t	namespace:fuzzer
WorkerThread	FuzzerDriver.cpp	/^static void WorkerThread(const std::string &Cmd, std::atomic<int> *Counter,$/;"	f	namespace:fuzzer
WriteMsgToFile	FuzzerIO.cpp	/^void WriteMsgToFile(const char *msg, const std::string &Path) {$/;"	f	namespace:fuzzer
WriteMsgToFileWithPrefix	FuzzerLoop.cpp	/^void Fuzzer::WriteMsgToFileWithPrefix(const char *msg, const Unit &U,$/;"	f	class:fuzzer::Fuzzer
WriteToFile	FuzzerIO.cpp	/^void WriteToFile(const Unit &U, const std::string &Path) {$/;"	f	namespace:fuzzer
WriteToOutputCorpus	FuzzerLoop.cpp	/^void Fuzzer::WriteToOutputCorpus(const Unit &U) {$/;"	f	class:fuzzer::Fuzzer
WriteUnitToFileWithPrefix	FuzzerLoop.cpp	/^void Fuzzer::WriteUnitToFileWithPrefix(const Unit &U, const char *Prefix) {$/;"	f	class:fuzzer::Fuzzer
__dfsw___sanitizer_cov_trace_cmp	FuzzerTraceState.cpp	/^void __dfsw___sanitizer_cov_trace_cmp(uint64_t SizeAndType, uint64_t Arg1,$/;"	f
__dfsw___sanitizer_cov_trace_switch	FuzzerTraceState.cpp	/^void __dfsw___sanitizer_cov_trace_switch(uint64_t Val, uint64_t *Cases,$/;"	f
__libfuzzer_is_present	FuzzerDriver.cpp	/^extern "C" __attribute__((used)) void __libfuzzer_is_present() {}$/;"	f
__sanitizer_cov_trace_cmp	FuzzerTraceState.cpp	/^void __sanitizer_cov_trace_cmp(uint64_t SizeAndType, uint64_t Arg1,$/;"	f
__sanitizer_cov_trace_pc	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_pc() {$/;"	f
__sanitizer_cov_trace_pc_indir	FuzzerTracePC.cpp	/^void __sanitizer_cov_trace_pc_indir(int *) {$/;"	f
__sanitizer_cov_trace_switch	FuzzerTraceState.cpp	/^void __sanitizer_cov_trace_switch(uint64_t Val, uint64_t *Cases) {$/;"	f
__sanitizer_free_hook	FuzzerLoop.cpp	/^void __sanitizer_free_hook(void *ptr) {$/;"	f
__sanitizer_malloc_hook	FuzzerLoop.cpp	/^void __sanitizer_malloc_hook(void *ptr, size_t size) {$/;"	f
__sanitizer_weak_hook_memcmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_memcmp(void *caller_pc, const void *s1,$/;"	f
__sanitizer_weak_hook_strcmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strcmp(void *caller_pc, const char *s1,$/;"	f
__sanitizer_weak_hook_strncmp	FuzzerTraceState.cpp	/^void __sanitizer_weak_hook_strncmp(void *caller_pc, const char *s1,$/;"	f
begin	FuzzerInternal.h	/^  const DictionaryEntry *begin() const { return &DE[0]; }$/;"	f	class:fuzzer::Dictionary
buffer	FuzzerSHA1.cpp	/^	uint32_t buffer[BLOCK_LENGTH\/4];$/;"	m	struct:__anon2::sha1nfo	file:
bufferOffset	FuzzerSHA1.cpp	/^	uint8_t bufferOffset;$/;"	m	struct:__anon2::sha1nfo	file:
byteCount	FuzzerSHA1.cpp	/^	uint32_t byteCount;$/;"	m	struct:__anon2::sha1nfo	file:
children	FuzzerCallTrie.cpp	/^  std::vector<Node> children;$/;"	m	struct:fuzzer::Node	file:
children	FuzzerInternal.h	/^  std::vector<Node> children;$/;"	m	struct:fuzzer::Node
clear	FuzzerInternal.h	/^  void clear() { Size = 0; }$/;"	f	class:fuzzer::Dictionary
data	FuzzerInternal.h	/^  const uint8_t *data() const { return Data; }$/;"	f	class:fuzzer::FixedWord
dfsan_add_label	FuzzerTraceState.cpp	/^void dfsan_add_label(dfsan_label label, void *addr, size_t size) {}$/;"	f
dfsan_create_label	FuzzerTraceState.cpp	/^dfsan_label dfsan_create_label(const char *desc, void *userdata) { return 0; }$/;"	f
dfsan_get_label_info	FuzzerTraceState.cpp	/^const struct dfsan_label_info *dfsan_get_label_info(dfsan_label label) {$/;"	f
dfsan_read_label	FuzzerTraceState.cpp	/^dfsan_label dfsan_read_label(const void *addr, size_t size) { return 0; }$/;"	f
dfsan_set_label	FuzzerTraceState.cpp	/^void dfsan_set_label(dfsan_label label, void *addr, size_t size) {}$/;"	f
dfsan_weak_hook_memcmp	FuzzerTraceState.cpp	/^void dfsan_weak_hook_memcmp(void *caller_pc, const void *s1, const void *s2,$/;"	f
dfsan_weak_hook_strcmp	FuzzerTraceState.cpp	/^void dfsan_weak_hook_strcmp(void *caller_pc, const char *s1, const char *s2,$/;"	f
dfsan_weak_hook_strncmp	FuzzerTraceState.cpp	/^void dfsan_weak_hook_strncmp(void *caller_pc, const char *s1, const char *s2,$/;"	f
empty	FuzzerInternal.h	/^  bool empty() const { return Size == 0; }$/;"	f	class:fuzzer::Dictionary
end	FuzzerInternal.h	/^  const DictionaryEntry *end() const { return begin() + Size; }$/;"	f	class:fuzzer::Dictionary
execPerSec	FuzzerInternal.h	/^  size_t execPerSec() {$/;"	f	class:fuzzer::Fuzzer
fuzzer	FuzzerCallTrie.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerCrossOver.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerDFSan.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerDriver.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerExtFunctions.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerExtFunctionsDlsym.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerExtFunctionsWeak.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerFnAdapter.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerIO.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerInternal.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerLoop.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerMutate.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerTracePC.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerTracePC.h	/^namespace fuzzer {$/;"	n
fuzzer	FuzzerTraceState.cpp	/^namespace fuzzer {$/;"	n	file:
fuzzer	FuzzerUtil.cpp	/^namespace fuzzer {$/;"	n	file:
getTotalNumberOfRuns	FuzzerInternal.h	/^  size_t getTotalNumberOfRuns() { return TotalNumberOfRuns; }$/;"	f	class:fuzzer::Fuzzer
impl	FuzzerFnAdapter.h	/^namespace impl {$/;"	n	namespace:fuzzer
innerHash	FuzzerSHA1.cpp	/^	uint8_t innerHash[HASH_LENGTH];$/;"	m	struct:__anon2::sha1nfo	file:
kBitsInWord	FuzzerTracePC.h	/^  static const size_t kBitsInWord = (sizeof(uintptr_t) * 8);$/;"	m	struct:fuzzer::PcCoverageMap
kMapSizeInBits	FuzzerTracePC.h	/^  static const size_t kMapSizeInBits = 65371;        \/\/ Prime.$/;"	m	struct:fuzzer::PcCoverageMap
kMapSizeInBitsAligned	FuzzerTracePC.h	/^  static const size_t kMapSizeInBitsAligned = 65536; \/\/ 2^16$/;"	m	struct:fuzzer::PcCoverageMap
kMapSizeInWords	FuzzerTracePC.h	/^  static const size_t kMapSizeInWords = kMapSizeInBitsAligned \/ kBitsInWord;$/;"	m	struct:fuzzer::PcCoverageMap
kMaxAflInputSize	afl/afl_driver.cpp	/^static const size_t kMaxAflInputSize = 1 << 20;$/;"	v	file:
kMaxDictSize	FuzzerInternal.h	/^  static const size_t kMaxDictSize = 1 << 14;$/;"	m	class:fuzzer::Dictionary
kMaxDictSize	FuzzerMutate.cpp	/^const size_t Dictionary::kMaxDictSize;$/;"	m	class:fuzzer::Dictionary	file:
kMaxMutations	FuzzerTraceState.cpp	/^  static const size_t kMaxMutations = 1 << 16;$/;"	m	class:fuzzer::TraceState	file:
kMaxUnitSizeToPrint	FuzzerLoop.cpp	/^static const size_t kMaxUnitSizeToPrint = 256;$/;"	m	namespace:fuzzer	file:
kNumFlags	FuzzerDriver.cpp	/^static const size_t kNumFlags =$/;"	m	namespace:fuzzer	file:
kSHA1NumBytes	FuzzerInternal.h	/^static const int kSHA1NumBytes = 20;$/;"	m	namespace:fuzzer
keyBuffer	FuzzerSHA1.cpp	/^	uint8_t keyBuffer[BLOCK_LENGTH];$/;"	m	struct:__anon2::sha1nfo	file:
main	FuzzerMain.cpp	/^int main(int argc, char **argv) {$/;"	f
main	afl/afl_driver.cpp	/^int main(int argc, char **argv) {$/;"	f
operator ()	FuzzerInternal.h	/^  size_t operator()(size_t n) { return n ? Rand() % n : 0; }$/;"	f	class:fuzzer::Random
operator <	FuzzerInternal.h	/^  bool operator<(const FixedWord<kMaxSize> &w) const {$/;"	f	class:fuzzer::FixedWord
operator ==	FuzzerInternal.h	/^  bool operator==(const FixedWord<kMaxSize> &w) const {$/;"	f	class:fuzzer::FixedWord
operator []	FuzzerInternal.h	/^  DictionaryEntry & operator[] (size_t Idx) {$/;"	f	class:fuzzer::Dictionary
push_back	FuzzerInternal.h	/^  void push_back(DictionaryEntry DE) {$/;"	f	class:fuzzer::Dictionary
root_node	FuzzerCallTrie.cpp	/^    Node root_node;$/;"	m	class:fuzzer::FuzzerCallTrie	file:
root_node	FuzzerInternal.h	/^    Node root_node;$/;"	m	class:fuzzer::FuzzerCallTrie
secondsSinceProcessStartUp	FuzzerInternal.h	/^  size_t secondsSinceProcessStartUp() {$/;"	f	class:fuzzer::Fuzzer
sha1_addUncounted	FuzzerSHA1.cpp	/^void sha1_addUncounted(sha1nfo *s, uint8_t data) {$/;"	f	namespace:__anon2
sha1_hashBlock	FuzzerSHA1.cpp	/^void sha1_hashBlock(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_init	FuzzerSHA1.cpp	/^void sha1_init(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_pad	FuzzerSHA1.cpp	/^void sha1_pad(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_result	FuzzerSHA1.cpp	/^uint8_t* sha1_result(sha1nfo *s) {$/;"	f	namespace:__anon2
sha1_rol32	FuzzerSHA1.cpp	/^uint32_t sha1_rol32(uint32_t number, uint8_t bits) {$/;"	f	namespace:__anon2
sha1_write	FuzzerSHA1.cpp	/^void sha1_write(sha1nfo *s, const char *data, size_t len) {$/;"	f	namespace:__anon2
sha1_writebyte	FuzzerSHA1.cpp	/^void sha1_writebyte(sha1nfo *s, uint8_t data) {$/;"	f	namespace:__anon2
sha1nfo	FuzzerSHA1.cpp	/^typedef struct sha1nfo {$/;"	s	namespace:__anon2	file:
sha1nfo	FuzzerSHA1.cpp	/^} sha1nfo;$/;"	t	namespace:__anon2	typeref:struct:__anon2::sha1nfo	file:
size	FuzzerExtFunctions.h	/^    int size;$/;"	m	struct:ValContainerInt
size	FuzzerExtFunctions.h	/^    int size;$/;"	m	struct:ValContainerU64
size	FuzzerInternal.h	/^  size_t size() const { return Size; }$/;"	f	class:fuzzer::Dictionary
size	FuzzerInternal.h	/^  uint8_t size() const { return Size; }$/;"	f	class:fuzzer::FixedWord
state	FuzzerSHA1.cpp	/^	uint32_t state[HASH_LENGTH\/4];$/;"	m	struct:__anon2::sha1nfo	file:
suppress_warning1	afl/afl_driver.cpp	/^static volatile char suppress_warning1 = AFL_DEFER_FORKSVR[0];$/;"	v	file:
suppress_warning2	afl/afl_driver.cpp	/^static volatile char suppress_warning2 = AFL_PERSISTENT[0];$/;"	v	file:
vals	FuzzerExtFunctions.h	/^    int *vals;$/;"	m	struct:ValContainerInt
vals	FuzzerExtFunctions.h	/^    uint64_t *vals;$/;"	m	struct:ValContainerU64
value	FuzzerCallTrie.cpp	/^  uint64_t value;$/;"	m	struct:fuzzer::Node	file:
value	FuzzerInternal.h	/^  uint64_t value;$/;"	m	struct:fuzzer::Node
~MutationDispatcher	FuzzerInternal.h	/^  ~MutationDispatcher() {}$/;"	f	class:fuzzer::MutationDispatcher
